variables:
  LZFSE_VERSION: '1.0'

jobs:
- job: native_windows
  strategy:
    maxParallel: 2
    matrix:
      x64:
        BUILD_ARCH: x64
        PLATFORM: x64
        RID: win7-x64
      x86:
        BUILD_ARCH: x86
        PLATFORM: Win32
        RID: win7-x86
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      %VCPKG_INSTALLATION_ROOT%\vcpkg version
      set VCPKG_BUILD_TYPE=release
      %VCPKG_INSTALLATION_ROOT%\vcpkg install lzfse:%BUILD_ARCH%-windows
    displayName: Install native dependencies
  - script: |
      mkdir %BUILD_ARTIFACTSTAGINGDIRECTORY%\lzfse\%RID%\bin\
      copy %VCPKG_INSTALLATION_ROOT%\installed\%BUILD_ARCH%-windows\bin\*.dll %BUILD_ARTIFACTSTAGINGDIRECTORY%\lzfse\%RID%\bin\
      copy %VCPKG_INSTALLATION_ROOT%\installed\%BUILD_ARCH%-windows\share\lzfse\copyright %BUILD_ARTIFACTSTAGINGDIRECTORY%\lzfse\%RID%\bin\lzfse.copyright
    displayName: 'Install'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/lzfse/'
      artifactName: 'lzfse' 
      publishLocation: 'Container'
    displayName: Publish

- job: native_macos
  pool:
    vmImage: 'xcode9-macos10.13'
  variables:
    TARGET: x86_64-apple-darwin
    RID: osx-x64
  steps:
  - script: |
      brew install automake
    displayName: Install autotools
  - script: |
      wget https://github.com/lzfse/lzfse/archive/lzfse-${LZFSE_VERSION}.tar.gz -O lzfse-${LZFSE_VERSION}.tar.gz
      tar xvf lzfse-${LZFSE_VERSION}.tar.gz
    displayName: Download sources
  - script: |
      cd lzfse-lzfse-${LZFSE_VERSION}
      mkdir build
      cd build
      cmake ..
      DESTDIR=${BUILD_ARTIFACTSTAGINGDIRECTORY}/lzfse/${RID} make install
    displayName: Build
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/lzfse' 
      artifactName: 'lzfse' 
      publishLocation: 'Container'
    displayName: Publish

- job: native_linux_ubuntu_16_04
  variables:
    RID: ubuntu.16.04-x64
    TARGET: x86_64-unknown-linux-gnu
    CFLAGS: -fPIC
  container:
    image: ubuntu:16.04
    options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
  steps:
  - script: |
      /tmp/docker exec -t -u 0 ci-container \
      sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
    displayName: Set up sudo
  - script: |
      sudo apt-get update
      sudo apt-get install -y lsb-release build-essential wget gcc cmake
  - script: |
      lsb_release -a
    displayName: Check Ubuntu version
  - script: |
      wget https://github.com/lzfse/lzfse/archive/lzfse-${LZFSE_VERSION}.tar.gz -O lzfse-${LZFSE_VERSION}.tar.gz
      tar xvf lzfse-${LZFSE_VERSION}.tar.gz
    displayName: Download sources
  - script: |
      cd lzfse-lzfse-${LZFSE_VERSION}
      mkdir build
      cd build
      cmake ..
      DESTDIR=${BUILD_ARTIFACTSTAGINGDIRECTORY}/lzfse/${RID} make install
    displayName: Build
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/lzfse'
      artifactName: 'lzfse'
      publishLocation: 'Container'
    displayName: Publish

- job: build_package
  dependsOn:
    - native_windows
    - native_macos
    - native_linux_ubuntu_16_04
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: lzfse
  - script: |
      cd src
      dotnet pack -c Release -o %BUILD_ARTIFACTSTAGINGDIRECTORY%\lzfse-net
    displayName: Build
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/lzfse-net'
      artifactName: 'nuget'
      publishLocation: 'Container'
    displayName: Publish